name: Terraform Deploy

on:
  push:
    branches:
      - develop
      - staging
      - main
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App name to destroy (e.g., app1, app2). Leave empty to apply all apps.'
        required: false
        type: string

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_region: us-east-1

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}  # Check out the branch that triggered the workflow

    - name: Determine Environment from Branch
      id: set-env
      run: |
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        case $BRANCH in
          develop) echo "TF_VAR_env=dev" >> $GITHUB_ENV ;;
          staging) echo "TF_VAR_env=stg" >> $GITHUB_ENV ;;
          main) echo "TF_VAR_env=prod" >> $GITHUB_ENV ;;
          *) echo "Unsupported branch: $BRANCH"; exit 1 ;;
        esac
        echo "Environment set to: $TF_VAR_env"

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      if: github.event_name == 'push' || github.event.inputs.app_name == ''
      run: terraform plan -var="env=$TF_VAR_env" -out=plan.tfout

    - name: Terraform Apply
      if: github.event_name == 'push' || github.event.inputs.app_name == ''
      run: terraform apply -auto-approve plan.tfout

    - name: Terraform Plan Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.app_name != ''
      run: terraform plan -destroy -var="env=$TF_VAR_env" -target="module.app_clients[\"${{ github.event.inputs.app_name }}\"]" -out=destroy.tfout

    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.app_name != ''
      run: terraform apply -auto-approve destroy.tfout
